<project name="MavenDS" basedir=".">
	<description>MavenDS: A Dataset and Analysis Framework for the Maven Repository</description>
	<property name="src" location="src" />
	<property name="resources" location="resources" />
	<property name="lib" location="lib" />
	<property name="build" location="build" />
	<property name="cache" location="cache" />
	<property name="out" location="out" />
	<property name="mirror.1" value="http://mirrors.ibiblio.org/maven2" />
	<property name="mirror.2" value="http://maven.antelink.com/content/repositories/central" />
	<property name="mirror.3" value="http://repo.jfrog.org/artifactory/simple/libs-release-bintray" />
	<property name="nexusindexgz.url" value="${mirror.1}/.index/nexus-maven-repository-index.gz" />
	<property name="nexusindexgz.path" location="${cache}/nexus-maven-repository-index.gz" />
	<property name="nexusindex.path" location="${cache}/nexus-maven-repository-index" />
	<property name="mavenindex.path" location="${out}/mavenindex.sqlite3" />
	<property name="urilist-dev.path" location="${out}/uri-dev.list" />
	<property name="repo-dev" location="${cache}/repo-dev" />
	<property name="sessionlist-dev.path" location="${out}/session-dev.list" />
	<path id="lib">
		<fileset dir="${lib}">
			<include name="*.jar" />
		</fileset>
	</path>
	<target name="-mkbuilddir" description="Creates the *build* directory, used for output of compilation.">
		<mkdir dir="${build}" />
	</target>
	<target name="-mkcachedir" description="Creates the *cache* directory, used to cache downloaded files.">
		<mkdir dir="${cache}" />
	</target>
	<target name="-mkoutdir" description="Creates the *out* directory, used for output files.">
		<mkdir dir="${out}" />
	</target>
	<target name="compile" depends="-mkbuilddir" description="Compiles all Java files.">
		<javac includeantruntime="false" srcdir="${src}" destdir="${build}">
			<classpath refid="lib" />
		</javac>
	</target>
	<target name="-fetchnexusindex" depends="-mkcachedir" description="Fetches the Nexus Maven Repository Index (GZipped) from the ibiblio mirror using *aria2*.">
		<exec executable="aria2c">
			<arg value="--dir=/" />
			<arg value="--max-concurrent-downloads=16" />
			<arg value="--auto-file-renaming=false" />
			<arg value="--conditional-get=true" />
			<arg value="--file-allocation=falloc" />
			<arg value="--out=${nexusindexgz.path}" />
			<arg value="${nexusindexgz.url}" />
		</exec>
	</target>
	<target name="nexusindex" depends="-fetchnexusindex" description="Fetches and uncompresses the Nexus Maven Repository Index from a mirror using *aria2*.">
		<gunzip src="${nexusindexgz.path}" dest="${nexusindex.path}" />
	</target>
	<target name="mavenindexdb" depends="compile,-mkoutdir" description="Builds the Maven Index (SQLite DB) from the Nexus Index.">
		<delete file="${mavenindex.path}" />
		<java classname="ch.usi.inf.mavends.BuildMavenIndexDb" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--nexusindex=${nexusindex.path}" />
			<arg value="--mavenindex=${mavenindex.path}" />
		</java>
	</target>
	<target name="urilist-dev" depends="compile,-mkoutdir" description="Builds the list of artifacts to download for Development.">
		<java classname="ch.usi.inf.mavends.BuildUriList" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindex.path}" />
			<arg value="--urilist=${urilist-dev.path}" />
			<arg value="--query=select path from artifact where substr(gid, 1, 3) = 'ar.'" />
			<arg value="--mirrors=${mirror.1},${mirror.2},${mirror.3}" />
		</java>
	</target>
	<target name="artifacts-dev" description="Fetches all artifacts specified by the URI list using aria2.">
		<exec executable="aria2c">
			<arg value="--dir=${repo-dev}" />
			<arg value="--max-concurrent-downloads=16" />
			<arg value="--auto-file-renaming=false" />
			<arg value="--input-file=${urilist-dev.path}" />
			<arg value="--save-session=${sessionlist-dev.path}" />
			<arg value="--conditional-get=true" />
		</exec>
	</target>
	<target name="analyze-debug" depends="compile,-mkoutdir" description="Analyze the Maven repository and JDK8 runtime in Debug mode.">
		<java classname="ch.usi.inf.sape.unsafeanalysis.Analyze" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--index=${indexpath}" />
			<arg value="--repo=${repo}" />
			<arg value="--artscount=${noartifacts.debug}" />
			<arg value="--output=${mavenunsafe}" />
		</java>
	</target>
	<target name="analyze-release" depends="compile,-mkoutdir" description="Analyze the Maven repository and JDK8 runtime in Release mode.">
		<java classname="ch.usi.inf.sape.unsafeanalysis.Analyze" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--index=${indexpath}" />
			<arg value="--repo=${repo}" />
			<arg value="--artscount=${noartifacts.release}" />
			<arg value="--output=${mavenunsafe}" />
		</java>
	</target>
	<target name="extractdeps" depends="compile" description="Extract the dependency information from POM files.">
		<java classname="ch.usi.inf.sape.unsafeanalysis.ExtractDeps" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--index=${indexpath}" />
			<arg value="--repo=${repo}" />
			<arg value="--output=${mavendepgraph}" />
		</java>
	</target>
	<target name="computedeps" depends="compile" description="Computes the inverse transitive dependencies.">
		<java classname="ch.usi.inf.sape.unsafeanalysis.ComputeDeps" classpath="${build}:${resources}">
			<classpath refid="lib" />
		</java>
	</target>
	<target name="analyze-tests" depends="compile" description="Run tests for Unsafe analysis.">
		<junit>
			<classpath>
				<pathelement location="lib/asm-all-5.0.3.jar" />
				<pathelement location="lib/junit-4.12.jar" />
				<pathelement location="lib/hamcrest-core-1.3.jar" />
				<pathelement path="${build}" />
			</classpath>
			<formatter type="plain" usefile="false" />
			<test name="ch.usi.inf.sape.unsafeanalysis.tests.UnsafeAnalysisTests" />
		</junit>
	</target>
	<target name="extractdeps-tests" depends="compile" description="Run tests for the dependency extraction.">
		<junit>
			<classpath>
				<pathelement location="lib/asm-all-5.0.3.jar" />
				<pathelement location="lib/junit-4.12.jar" />
				<pathelement location="lib/hamcrest-core-1.3.jar" />
				<pathelement path="${build}" />
			</classpath>
			<formatter type="plain" usefile="false" />
			<test name="ch.usi.inf.sape.unsafeanalysis.tests.DepsManagerTests" />
		</junit>
	</target>
	<target name="dist" depends="compile" description="Makes jar file of the project including its resources and sources.">
		<jar destfile="${out}/mavends.jar">
			<fileset dir="${build}" />
			<fileset dir="${resources}" />
			<fileset dir="${src}" />
		</jar>
	</target>
	<target name="extract" depends="compile" description="Extract the dependency information from POM files.">
		<!--delete file="${out}/mavends.jar.sqlite3" /-->
		<java classname="ch.usi.inf.mavends.Extract" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--jar=${out}/mavends.jar" />
			<arg value="--db=${out}/mavends.jar.sqlite3" />
		</java>
	</target>
	<target name="extract-guava" depends="compile" description="Extract the dependency information from POM files.">
		<delete file="${out}/guava-18.0.mds.sqlite3" />
		<java classname="ch.usi.inf.mavends.Extract" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--jar=${lib}/guava-18.0.jar" />
			<arg value="--db=${out}/guava-18.0.mds.sqlite3" />
		</java>
	</target>
	<target name="clean" description="Removes the *build* and *out* directories.">
		<delete dir="${build}" />
		<delete dir="${out}" />
	</target>
</project>
