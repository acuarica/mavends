<project name="MavenDS" basedir=".">
	<description>MavenDS: A Dataset and Analysis Framework for the Maven Repository. Targets begining with '-' are executed internally by other targets. To fetch the Nexus Index and Maven Artifact *aria2* (http://aria2.sourceforge.net/) is used.</description>
	<property name="src" location="src" />
	<property name="resources" location="resources" />
	<property name="lib" location="lib" />
	<property name="build" location="build" />
	<property name="cache" location="cache" />
	<property name="out" location="out" />
	<property name="mirror.1" value="http://mirrors.ibiblio.org/maven2" />
	<property name="mirror.2" value="http://maven.antelink.com/content/repositories/central" />
	<property name="mirror.3" value="http://repo.jfrog.org/artifactory/simple/libs-release-bintray" />
	<property name="nexusindexgz.url" value="${mirror.1}/.index/nexus-maven-repository-index.gz" />
	<property name="nexusindexgz.path" location="${cache}/nexus-maven-repository-index.gz" />
	<property name="nexusindex.path" location="${cache}/nexus-maven-repository-index" />
	<property name="mavenindex.path" location="${out}/mavenindex.sqlite3" />
	<property name="query-dev" value="select coorid from artifact_jar where rootgroup = 'es'" />
	<property name="query-test" value="select coorid from artifact_jar where rootgroup = 'net'" />
	<property name="query-prod" value="select coorid from artifact_jar" />
	<property name="urilist.path" location="${out}/uri.list" />
	<property name="sessionlist.path" location="${out}/session.list" />
	<property name="repo" location="${cache}/repo" />
	<property name="maveninode-dev.path" location="${out}/maveninode-dev.sqlite3" />
	<property name="maveninode-test.path" location="${out}/maveninode-test.sqlite3" />
	<property name="maveninode-prod.path" location="${out}/maveninode-prod.sqlite3" />
	<property name="mavenpom-dev.path" location="${out}/mavenpom-dev.sqlite3" />
	<property name="mavenpom-test.path" location="${out}/mavenpom-test.sqlite3" />
	<property name="mavenpom-prod.path" location="${out}/mavenpom-prod.sqlite3" />
	<path id="lib">
		<fileset dir="${lib}">
			<include name="*.jar" />
		</fileset>
	</path>
	<target name="-mkbuilddir" description="Creates the build/ directory, used for output of compilation.">
		<mkdir dir="${build}" />
	</target>
	<target name="-mkcachedir" description="Creates the cache/ directory, used to cache downloaded files.">
		<mkdir dir="${cache}" />
	</target>
	<target name="-mkoutdir" description="Creates the out/ directory, used for output files.">
		<mkdir dir="${out}" />
	</target>
	<target name="-compile" depends="-mkbuilddir" description="Compiles all Java files under the src/ directory.">
		<javac includeantruntime="false" srcdir="${src}" destdir="${build}" debug="true">
			<classpath refid="lib" />
		</javac>
	</target>
	<target name="nexusindex" depends="-mkcachedir" description="Fetches and uncompresses the Nexus Maven Repository Index.">
		<exec executable="aria2c">
			<arg value="--dir=/" />
			<arg value="--max-concurrent-downloads=16" />
			<arg value="--auto-file-renaming=false" />
			<arg value="--conditional-get=true" />
			<arg value="--allow-overwrite=true" />
			<arg value="--file-allocation=falloc" />
			<arg value="--out=${nexusindexgz.path}" />
			<arg value="${nexusindexgz.url}" />
		</exec>
		<gunzip src="${nexusindexgz.path}" dest="${nexusindex.path}" />
	</target>
	<target name="mavenindex" depends="-compile,-mkoutdir" description="Creates and populates the Maven Index DB from the Nexus Index.">
		<delete file="${mavenindex.path}" />
		<exec executable="sqlite3" input="resources/mavenindex.sql">
			<arg value="-bail" />
			<arg value="-echo" />
			<arg value="${mavenindex.path}" />
		</exec>
		<java classname="ch.usi.inf.mavends.PopulateMavenIndex" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--nexusindex=${nexusindex.path}" />
			<arg value="--mavenindex=${mavenindex.path}" />
		</java>
	</target>
	<target name="urilist-dev" depends="-compile,-mkoutdir" description="Builds the list of artifacts to download configuration.">
		<java classname="ch.usi.inf.mavends.BuildUriList" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindex.path}" />
			<arg value="--urilist=${urilist.path}" />
			<arg value="--query=${query-dev}" />
			<arg value="--mirrors=${mirror.1},${mirror.2},${mirror.3}" />
		</java>
	</target>
	<target name="urilist-test" depends="-compile,-mkoutdir" description="Builds the list of artifacts to download configuration.">
		<java classname="ch.usi.inf.mavends.BuildUriList" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindex.path}" />
			<arg value="--urilist=${urilist.path}" />
			<arg value="--query=${query-test}" />
			<arg value="--mirrors=${mirror.1},${mirror.2},${mirror.3}" />
		</java>
	</target>
	<target name="urilist-prod" depends="-compile,-mkoutdir" description="Builds the list of artifacts to download configuration.">
		<java classname="ch.usi.inf.mavends.BuildUriList" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindex.path}" />
			<arg value="--urilist=${urilist.path}" />
			<arg value="--query=${query-prod}" />
			<arg value="--mirrors=${mirror.1},${mirror.2},${mirror.3}" />
		</java>
	</target>
	<target name="fetcharts" description="Fetches all artifacts specified by the URI list in with *aria2*.">
		<exec executable="aria2c">
			<arg value="--dir=${repo}" />
			<arg value="--max-concurrent-downloads=16" />
			<arg value="--auto-file-renaming=false" />
			<arg value="--conditional-get=true" />
			<arg value="--allow-overwrite=true" />
			<arg value="--input-file=${urilist.path}" />
			<arg value="--save-session=${sessionlist.path}" />
			<arg value="--deferred-input=true" />
		</exec>
	</target>
	<target name="maveninode-dev" depends="-compile" description="Extract the dependency information from POM files.">
		<delete file="${maveninode-dev.path}" />
		<exec executable="sqlite3" input="resources/maveninode.sql">
			<arg value="-bail" />
			<arg value="-echo" />
			<arg value="${maveninode-dev.path}" />
		</exec>
		<java classname="ch.usi.inf.mavends.BuildMavenInode" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindex.path}" />
			<arg value="--repo=${repo}" />
			<arg value="--query=${query-dev}" />
			<arg value="--maveninode=${maveninode-dev.path}" />
		</java>
	</target>
	<target name="maveninode-test" depends="-compile" description="Extract the dependency information from POM files.">
		<delete file="${maveninode-test.path}" />
		<exec executable="sqlite3" input="resources/maveninode.sql">
			<arg value="-bail" />
			<arg value="-echo" />
			<arg value="${maveninode-test.path}" />
		</exec>
		<java classname="ch.usi.inf.mavends.BuildMavenInode" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindex.path}" />
			<arg value="--repo=${repo}" />
			<arg value="--query=${query-test}" />
			<arg value="--maveninode=${maveninode-test.path}" />
		</java>
	</target>
	<target name="maveninode-prod" depends="-compile" description="Extract the dependency information from POM files.">
		<delete file="${maveninode-prod.path}" />
		<exec executable="sqlite3" input="resources/maveninode.sql">
			<arg value="-bail" />
			<arg value="-echo" />
			<arg value="${maveninode-prod.path}" />
		</exec>
		<java classname="ch.usi.inf.mavends.BuildMavenInode" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindex.path}" />
			<arg value="--repo=${repo}" />
			<arg value="--query=${query-prod}" />
			<arg value="--maveninode=${maveninode-prod.path}" />
		</java>
	</target>
	<target name="mavenpom-dev" depends="-compile" description="Extract the information from POM files.">
		<delete file="${mavenpom-dev.path}" />
		<exec executable="sqlite3" input="resources/mavenpom.sql">
			<arg value="-bail" />
			<arg value="-echo" />
			<arg value="${mavenpom-dev.path}" />
		</exec>
		<java classname="ch.usi.inf.mavends.BuildMavenPom" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindex.path}" />
			<arg value="--repo=${repo}" />
			<arg value="--query=${query-dev}" />
			<arg value="--mavenpom=${mavenpom-dev.path}" />
		</java>
	</target>
	<target name="mavenpom-test" depends="-compile" description="Extract the information from POM files.">
		<delete file="${mavenpom-test.path}" />
		<exec executable="sqlite3" input="resources/mavenpom.sql">
			<arg value="-bail" />
			<arg value="-echo" />
			<arg value="${mavenpom-test.path}" />
		</exec>
		<java classname="ch.usi.inf.mavends.BuildMavenPom" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindex.path}" />
			<arg value="--repo=${repo}" />
			<arg value="--query=${query-test}" />
			<arg value="--mavenpom=${mavenpom-test.path}" />
		</java>
	</target>
	<target name="mavenpom-prod" depends="-compile" description="Extract the information from POM files.">
		<delete file="${mavenpom-prod.path}" />
		<exec executable="sqlite3" input="resources/mavenpom.sql">
			<arg value="-bail" />
			<arg value="-echo" />
			<arg value="${mavenpom-prod.path}" />
		</exec>
		<java classname="ch.usi.inf.mavends.BuildMavenPom" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindex.path}" />
			<arg value="--repo=${repo}" />
			<arg value="--query=${query-prod}" />
			<arg value="--mavenpom=${mavenpom-prod.path}" />
		</java>
	</target>
	<target name="clean" description="Removes the *build* directory.">
		<delete dir="${build}" />
	</target>
</project>
