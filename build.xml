<project name="MavenDS" basedir=".">
	<description>MavenDS: A Dataset and Analysis Framework for the Maven Repository</description>
	<property name="src" location="src" />
	<property name="resources" location="resources" />
	<property name="lib" location="lib" />
	<property name="build" location="build" />
	<property name="cache" location="cache" />
	<property name="out" location="out" />
	<property name="mirror.1" value="http://mirrors.ibiblio.org/maven2" />
	<property name="mirror.2" value="http://maven.antelink.com/content/repositories/central" />
	<property name="mirror.3" value="http://repo.jfrog.org/artifactory/simple/libs-release-bintray" />
	<property name="nexusindexgz.url" value="${mirror.1}/.index/nexus-maven-repository-index.gz" />
	<property name="nexusindexgz.path" location="${cache}/nexus-maven-repository-index.gz" />
	<property name="nexusindex.path" location="${cache}/nexus-maven-repository-index" />
	<property name="mavenindexdb.path" location="${out}/mavenindex.sqlite3" />
	<property name="query-dev" value="select gid, aid, ver from art where classifier = 'NA' and packaging = 'jar' and ext = 'jar' and substr(gid, 1, 3) = 'ar.'" />
	<property name="query-test" value="select gid, aid, ver from art where classifier = 'NA' and packaging = 'jar' and ext = 'jar' and substr(gid, 1, 3) = 'es.'" />
	<property name="query-last" value="select gid, aid, ver from art where classifier = 'NA' and packaging = 'jar' and ext = 'jar' group by gid, aid having idate = max(idate)" />
	<property name="urilist.path" location="${out}/uri.list" />
	<property name="sessionlist.path" location="${out}/session.list" />
	<property name="repo" location="${cache}/repo" />
	<property name="mavenbytecodedb-dev.path" location="${out}/mavenbytecode-dev.sqlite3" />
	<property name="mavenbytecodedb-test.path" location="${out}/mavenbytecode-test.sqlite3" />
	<property name="mavenpomdb-dev.path" location="${out}/mavenpom-dev.sqlite3" />
	<property name="mavenpomdb-test.path" location="${out}/mavenpom-test.sqlite3" />
	<path id="lib">
		<fileset dir="${lib}">
			<include name="*.jar" />
		</fileset>
	</path>
	<target name="-mkbuilddir" description="Creates the *build* directory, used for output of compilation.">
		<mkdir dir="${build}" />
	</target>
	<target name="-mkcachedir" description="Creates the *cache* directory, used to cache downloaded files.">
		<mkdir dir="${cache}" />
	</target>
	<target name="-mkoutdir" description="Creates the *out* directory, used for output files.">
		<mkdir dir="${out}" />
	</target>
	<target name="-compile" depends="-mkbuilddir" description="Compiles all Java files.">
		<javac includeantruntime="false" srcdir="${src}" destdir="${build}">
			<classpath refid="lib" />
		</javac>
	</target>
	<target name="-fetchnexusindex" depends="-mkcachedir" description="Fetches the Nexus Maven Repository Index (GZipped) from the ibiblio mirror using *aria2*.">
		<exec executable="aria2c">
			<arg value="--dir=/" />
			<arg value="--max-concurrent-downloads=16" />
			<arg value="--auto-file-renaming=false" />
			<arg value="--conditional-get=true" />
			<arg value="--file-allocation=falloc" />
			<arg value="--out=${nexusindexgz.path}" />
			<arg value="${nexusindexgz.url}" />
		</exec>
	</target>
	<target name="nexusindex" depends="-fetchnexusindex" description="Fetches and uncompresses the Nexus Maven Repository Index from a mirror using *aria2*.">
		<gunzip src="${nexusindexgz.path}" dest="${nexusindex.path}" />
	</target>
	<target name="mavenindexdb" depends="-compile,-mkoutdir" description="Builds the Maven Index DB from the Nexus Index.">
		<delete file="${mavenindexdb.path}" />
		<java classname="ch.usi.inf.mavends.BuildMavenIndexDb" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--nexusindex=${nexusindex.path}" />
			<arg value="--mavenindex=${mavenindexdb.path}" />
		</java>
	</target>
	<target name="urilist-dev" depends="-compile,-mkoutdir" description="Builds the list of artifacts to download in development configuration.">
		<java classname="ch.usi.inf.mavends.BuildUriList" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindexdb.path}" />
			<arg value="--urilist=${urilist.path}" />
			<arg value="--query=${query-dev}" />
			<arg value="--mirrors=${mirror.1},${mirror.2},${mirror.3}" />
		</java>
	</target>
	<target name="urilist-test" depends="-compile,-mkoutdir" description="Builds the list of artifacts to download in test configuration.">
		<java classname="ch.usi.inf.mavends.BuildUriList" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindexdb.path}" />
			<arg value="--urilist=${urilist.path}" />
			<arg value="--query=${query-test}" />
			<arg value="--mirrors=${mirror.1},${mirror.2},${mirror.3}" />
		</java>
	</target>
	<target name="urilist-last" depends="-compile,-mkoutdir" description="Builds the list of artifacts to download in last configuration.">
		<java classname="ch.usi.inf.mavends.BuildUriList" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindexdb.path}" />
			<arg value="--urilist=${urilist.path}" />
			<arg value="--query=${query-last}" />
			<arg value="--mirrors=${mirror.1},${mirror.2},${mirror.3}" />
		</java>
	</target>
	<target name="arts" description="Fetches all artifacts specified by the URI list in with *aria2*.">
		<exec executable="aria2c">
			<arg value="--dir=${repo}" />
			<arg value="--max-concurrent-downloads=16" />
			<arg value="--auto-file-renaming=false" />
			<arg value="--conditional-get=true" />
			<arg value="--input-file=${urilist.path}" />
			<arg value="--save-session=${sessionlist.path}" />
		</exec>
	</target>
	<target name="mavenbytecodedb-dev" depends="-compile" description="Extract the dependency information from POM files.">
		<delete file="${mavenbytecodedb-dev.path}" />
		<java classname="ch.usi.inf.mavends.BuildMavenBytecodeDb" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindexdb.path}" />
			<arg value="--repo=${repo}" />
			<arg value="--query=${query-dev}" />
			<arg value="--mavenbytecodedb=${mavenbytecodedb-dev.path}" />
		</java>
	</target>
	<target name="mavenbytecodedb-test" depends="-compile" description="Extract the dependency information from POM files.">
		<delete file="${mavenbytecodedb-test.path}" />
		<java classname="ch.usi.inf.mavends.BuildMavenBytecodeDb" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindexdb.path}" />
			<arg value="--repo=${repo}" />
			<arg value="--query=${query-test}" />
			<arg value="--mavenbytecodedb=${mavenbytecodedb-test.path}" />
		</java>
	</target>
	<target name="mavenpomdb-dev" depends="-compile" description="Extract the information from POM files.">
		<delete file="${mavenpomdb-dev.path}" />
		<java classname="ch.usi.inf.mavends.BuildMavenPomDb" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindexdb.path}" />
			<arg value="--repo=${repo}" />
			<arg value="--query=${query-dev}" />
			<arg value="--mavenpom=${mavenpomdb-dev.path}" />
		</java>
	</target>
	<target name="mavenpomdb-test" depends="-compile" description="Extract the information from POM files.">
		<delete file="${mavenpomdb-test.path}" />
		<java classname="ch.usi.inf.mavends.BuildMavenPomDb" classpath="${build}:${resources}">
			<classpath refid="lib" />
			<arg value="--mavenindex=${mavenindexdb.path}" />
			<arg value="--repo=${repo}" />
			<arg value="--query=${query-test}" />
			<arg value="--mavenpom=${mavenpomdb-test.path}" />
		</java>
	</target>
	<target name="mavends-dev" description="mavends db.">
		<delete file="out/mavends.sqlite3" />
		<exec executable="bash">
			<arg value="-c" />
			<arg value="cd ${out} &amp;&amp; cat ../resources/mavendsdb.sql | sqlite3 mavends.sqlite3" />
		</exec>
	</target>
	<target name="clean" description="Removes the *build* and *out* directories.">
		<delete dir="${build}" />
		<delete dir="${out}" />
	</target>
</project>
